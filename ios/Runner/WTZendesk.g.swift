// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// platform agnostic error
///
/// Generated class from Pigeon that represents data sent in messages.
struct ZendeskError {
  ///
  ///
  ///
  /// Android
  ///
  ///
  ///
  /// the detail message string.
  /// - NULLABLE natively
  var messageAndroid: String? = nil
  /// Returns the short description of this throwable consisting of the exception class name (fully qualified if possible) followed by the exception message if it is not null.
  var toStringAndroid: String? = nil
  ///
  ///
  ///
  /// iOS
  ///
  ///
  ///
  /// The error code.
  var codeIOS: Int64? = nil
  /// A string containing the error domain.
  var domainIOS: String? = nil
  /// The user info dictionary.
  /// - Map<String,dynamic> natively
  var userInfoIOS: [String?: String?]? = nil
  /// A string containing the localized description of the error.
  var localizedDescriptionIOS: String? = nil
  /// An array containing the localized titles of buttons appropriate for displaying in an alert panel.
  /// - NULLABLE natively
  var localizedRecoveryOptionsIOS: [String?]? = nil
  /// A string containing the localized recovery suggestion for the error.
  /// - NULLABLE natively
  var localizedRecoverySuggestionIOS: String? = nil
  /// A string containing the localized explanation of the reason for the error.
  /// - NULLABLE natively
  var localizedFailureReasonIOS: String? = nil
  ///
  ///
  ///
  /// Other
  ///
  ///
  ///
  var nonOSError: String? = nil

  static func fromList(_ list: [Any?]) -> ZendeskError? {
    let messageAndroid: String? = nilOrValue(list[0])
    let toStringAndroid: String? = nilOrValue(list[1])
    let codeIOS: Int64? = isNullish(list[2]) ? nil : (list[2] is Int64? ? list[2] as! Int64? : Int64(list[2] as! Int32))
    let domainIOS: String? = nilOrValue(list[3])
    let userInfoIOS: [String?: String?]? = nilOrValue(list[4])
    let localizedDescriptionIOS: String? = nilOrValue(list[5])
    let localizedRecoveryOptionsIOS: [String?]? = nilOrValue(list[6])
    let localizedRecoverySuggestionIOS: String? = nilOrValue(list[7])
    let localizedFailureReasonIOS: String? = nilOrValue(list[8])
    let nonOSError: String? = nilOrValue(list[9])

    return ZendeskError(
      messageAndroid: messageAndroid,
      toStringAndroid: toStringAndroid,
      codeIOS: codeIOS,
      domainIOS: domainIOS,
      userInfoIOS: userInfoIOS,
      localizedDescriptionIOS: localizedDescriptionIOS,
      localizedRecoveryOptionsIOS: localizedRecoveryOptionsIOS,
      localizedRecoverySuggestionIOS: localizedRecoverySuggestionIOS,
      localizedFailureReasonIOS: localizedFailureReasonIOS,
      nonOSError: nonOSError
    )
  }
  func toList() -> [Any?] {
    return [
      messageAndroid,
      toStringAndroid,
      codeIOS,
      domainIOS,
      userInfoIOS,
      localizedDescriptionIOS,
      localizedRecoveryOptionsIOS,
      localizedRecoverySuggestionIOS,
      localizedFailureReasonIOS,
      nonOSError,
    ]
  }
}

private class ZendeskApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return ZendeskError.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ZendeskApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ZendeskError {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ZendeskApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ZendeskApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ZendeskApiCodecWriter(data: data)
  }
}

class ZendeskApiCodec: FlutterStandardMessageCodec {
  static let shared = ZendeskApiCodec(readerWriter: ZendeskApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ZendeskApi {
  ///
  ///
  ///
  /// paired with callbacks below
  ///
  ///
  ///
  func initialize(channelKey: String) throws
  func loginUser(jwt: String) throws
  func logoutUser() throws
  func getUnreadMessageCount() throws
  /// this goes pretty much only one way - return an error or don't
  func invalidate(completion: @escaping (Result<ZendeskError?, Error>) -> Void)
  func show(completion: @escaping (Result<ZendeskError?, Error>) -> Void)
  func setConversationTags(tags: [String], completion: @escaping (Result<ZendeskError?, Error>) -> Void)
  func clearConversationTags(completion: @escaping (Result<ZendeskError?, Error>) -> Void)
  func setConversationFields(fields: [String: String], completion: @escaping (Result<ZendeskError?, Error>) -> Void)
  func clearConversationFields(completion: @escaping (Result<ZendeskError?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ZendeskApiSetup {
  /// The codec used by ZendeskApi.
  static var codec: FlutterStandardMessageCodec { ZendeskApiCodec.shared }
  /// Sets up an instance of `ZendeskApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ZendeskApi?) {
    ///
    ///
    ///
    /// paired with callbacks below
    ///
    ///
    ///
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let channelKeyArg = args[0] as! String
        do {
          try api.initialize(channelKey: channelKeyArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let loginUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.loginUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let jwtArg = args[0] as! String
        do {
          try api.loginUser(jwt: jwtArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loginUserChannel.setMessageHandler(nil)
    }
    let logoutUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.logoutUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logoutUserChannel.setMessageHandler { _, reply in
        do {
          try api.logoutUser()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logoutUserChannel.setMessageHandler(nil)
    }
    let getUnreadMessageCountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.getUnreadMessageCount", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUnreadMessageCountChannel.setMessageHandler { _, reply in
        do {
          try api.getUnreadMessageCount()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getUnreadMessageCountChannel.setMessageHandler(nil)
    }
    /// this goes pretty much only one way - return an error or don't
    let invalidateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.invalidate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      invalidateChannel.setMessageHandler { _, reply in
        api.invalidate { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      invalidateChannel.setMessageHandler(nil)
    }
    let showChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.show", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showChannel.setMessageHandler { _, reply in
        api.show { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      showChannel.setMessageHandler(nil)
    }
    let setConversationTagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.setConversationTags", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setConversationTagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tagsArg = args[0] as! [String]
        api.setConversationTags(tags: tagsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setConversationTagsChannel.setMessageHandler(nil)
    }
    let clearConversationTagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.clearConversationTags", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearConversationTagsChannel.setMessageHandler { _, reply in
        api.clearConversationTags { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      clearConversationTagsChannel.setMessageHandler(nil)
    }
    let setConversationFieldsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.setConversationFields", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setConversationFieldsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let fieldsArg = args[0] as! [String: String]
        api.setConversationFields(fields: fieldsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setConversationFieldsChannel.setMessageHandler(nil)
    }
    let clearConversationFieldsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.wtzendesk.api.ZendeskApi.clearConversationFields", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearConversationFieldsChannel.setMessageHandler { _, reply in
        api.clearConversationFields { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      clearConversationFieldsChannel.setMessageHandler(nil)
    }
  }
}
private class ZendeskCallbacksCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return ZendeskError.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ZendeskCallbacksCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ZendeskError {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ZendeskCallbacksCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ZendeskCallbacksCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ZendeskCallbacksCodecWriter(data: data)
  }
}

class ZendeskCallbacksCodec: FlutterStandardMessageCodec {
  static let shared = ZendeskCallbacksCodec(readerWriter: ZendeskCallbacksCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ZendeskCallbacksProtocol {
  /// complete [ZendeskApi.initialize]
  func initializeSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func initializeError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// complete [ZendeskApi.loginUser]
  func loginUserSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func loginUserError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// complete [ZendeskApi.logoutUser]
  func logoutUserSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func logoutUserError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void)
  /// complete [ZendeskApi.getUnreadMessageCount]
  func getUnreadMessageCountSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func getUnreadMessageCountError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class ZendeskCallbacks: ZendeskCallbacksProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return ZendeskCallbacksCodec.shared
  }
  /// complete [ZendeskApi.initialize]
  func initializeSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.initializeSuccess"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func initializeError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.initializeError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// complete [ZendeskApi.loginUser]
  func loginUserSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.loginUserSuccess"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func loginUserError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.loginUserError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// complete [ZendeskApi.logoutUser]
  func logoutUserSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.logoutUserSuccess"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func logoutUserError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.logoutUserError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// complete [ZendeskApi.getUnreadMessageCount]
  func getUnreadMessageCountSuccess(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.getUnreadMessageCountSuccess"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func getUnreadMessageCountError(error errorArg: ZendeskError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.wtzendesk.api.ZendeskCallbacks.getUnreadMessageCountError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
